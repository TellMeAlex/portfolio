name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  push:
    paths:
      - 'package*.json'
      - '.github/workflows/security.yml'
      - 'src/**'
  pull_request:
    paths:
      - 'package*.json'
      - 'src/**'

env:
  NODE_VERSION: '20.x'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Run yarn audit
      run: |
        yarn audit --json > audit-report.json || true
        cat audit-report.json

    - name: Upload audit report
      uses: actions/upload-artifact@v3
      with:
        name: yarn-audit-report
        path: audit-report.json

    - name: Check for high/critical vulnerabilities
      run: |
        HIGH_CRITICAL=$(cat audit-report.json | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical')
        if [ "$HIGH_CRITICAL" -gt 0 ]; then
          echo "❌ Found $HIGH_CRITICAL high/critical vulnerabilities"
          exit 1
        fi
        echo "✅ No high/critical vulnerabilities found"

  # Static code security analysis
  code-security-analysis:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        queries: security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:javascript"

  # Secrets scanning
  secrets-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # License compliance
  license-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Check licenses
      run: |
        yarn licenses list --json > licenses.json

        # Check for forbidden licenses
        FORBIDDEN_LICENSES=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0")

        for license in "${FORBIDDEN_LICENSES[@]}"; do
          if cat licenses.json | jq -r '.[] | select(.licenses | contains("'$license'")) | .name' | grep -q .; then
            echo "❌ Found forbidden license: $license"
            exit 1
          fi
        done

        echo "✅ No forbidden licenses found"

    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: licenses.json

  # Container security scanning (if using Docker)
  container-scan:
    runs-on: ubuntu-latest
    if: hashFiles('Dockerfile') != ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Build Docker image
      run: docker build -t portfolio:latest .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'portfolio:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Security policy compliance
  security-policy-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Check security policy
      run: |
        # Verify SECURITY.md exists
        if [ ! -f SECURITY.md ]; then
          echo "❌ SECURITY.md not found. Creating template..."
          echo "Security policy should be documented"
        fi

    - name: Check branch protection
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if main branch is protected
        PROTECTED=$(gh api repos/${{ github.repository }}/branches/main/protection --jq '.enabled' 2>/dev/null || echo "false")
        if [ "$PROTECTED" != "true" ]; then
          echo "⚠️ Main branch is not protected. Consider enabling branch protection."
        else
          echo "✅ Main branch is protected"
        fi

  # Generate security report
  security-report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-analysis, secrets-scan, license-check]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate security summary
      run: |
        echo "# Security Report - $(date)" > security-report.md
        echo "" >> security-report.md

        # Add dependency scan results
        if [ -f yarn-audit-report/audit-report.json ]; then
          echo "## Dependency Vulnerabilities" >> security-report.md
          VULNS=$(cat yarn-audit-report/audit-report.json | jq '.metadata.vulnerabilities')
          echo "- High: $(echo $VULNS | jq '.high')" >> security-report.md
          echo "- Moderate: $(echo $VULNS | jq '.moderate')" >> security-report.md
          echo "- Low: $(echo $VULNS | jq '.low')" >> security-report.md
          echo "" >> security-report.md
        fi

        # Add license compliance
        if [ -f license-report/licenses.json ]; then
          echo "## License Compliance" >> security-report.md
          echo "✅ All licenses are compliant" >> security-report.md
          echo "" >> security-report.md
        fi

        echo "## Recommendations" >> security-report.md
        echo "- Keep dependencies updated" >> security-report.md
        echo "- Regular security reviews" >> security-report.md
        echo "- Monitor security advisories" >> security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md

  # Notify on security issues
  notify-security-issues:
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-analysis, secrets-scan]
    if: failure()

    steps:
    - name: Create security issue
      uses: actions/github-script@v6
      with:
        script: |
          const title = `🔒 Security Issue Detected - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## Security Alert

          Our automated security scanning has detected potential issues in the repository.

          **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          **Detected Issues**:
          - Check the workflow logs for detailed information
          - Review the uploaded artifacts for specific findings

          **Next Steps**:
          1. Review the security findings
          2. Address any critical or high-severity issues
          3. Update dependencies if needed
          4. Close this issue once resolved

          **Labels**: security, critical
          `;

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'critical']
          });