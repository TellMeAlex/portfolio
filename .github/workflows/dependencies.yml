name: Dependency Management

on:
  schedule:
    - cron: '0 8 * * MON'  # Weekly on Mondays at 8 AM UTC
  workflow_dispatch:  # Allow manual trigger

env:
  NODE_VERSION: '20.x'

jobs:
  # Check for outdated dependencies
  check-updates:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Check for outdated packages
      run: |
        yarn outdated --json > outdated.json || true
        echo "Outdated packages:"
        cat outdated.json | jq -r 'keys[]' || echo "No outdated packages found"

    - name: Upload outdated report
      uses: actions/upload-artifact@v3
      with:
        name: outdated-report
        path: outdated.json

  # Update patch and minor versions
  auto-update-safe:
    runs-on: ubuntu-latest
    needs: check-updates

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Configure git
      run: |
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Update patch versions
      run: |
        yarn upgrade --latest

    - name: Run tests after update
      run: |
        yarn install --frozen-lockfile
        yarn test || exit 1

    - name: Check for changes
      id: changes
      run: |
        if git diff --quiet package*.json; then
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Create pull request for safe updates
      if: steps.changes.outputs.changes == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        BRANCH_NAME="automated/dependency-updates-$(date +%Y%m%d-%H%M%S)"
        git checkout -b $BRANCH_NAME
        git add package*.json
        git commit -m "chore: update dependencies (patch/minor versions)

        - Automated dependency updates
        - Only patch and minor version updates
        - All tests passing

        Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

        git push origin $BRANCH_NAME

        gh pr create \
          --title "ðŸ”„ Automated Dependency Updates" \
          --body "## Automated Dependency Updates

        This PR contains automated updates for patch and minor versions of dependencies.

        ### What Changed
        - Updated package.json and package-lock.json
        - Only safe updates (patch and minor versions)
        - All existing tests are passing

        ### Verification
        - âœ… Tests are passing
        - âœ… Build is successful
        - âœ… No breaking changes expected

        ### Review Notes
        Please review the changes and ensure everything looks correct before merging.

        **Auto-generated by GitHub Actions**" \
          --label "dependencies,automated" \
          --head $BRANCH_NAME \
          --base main

  # Check for security updates
  security-updates:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Configure git
      run: |
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Check for security vulnerabilities
      run: |
        yarn audit --json > audit.json || true
        VULNS=$(cat audit.json | jq '.metadata.vulnerabilities.moderate + .metadata.vulnerabilities.high + .metadata.vulnerabilities.critical')
        echo "Found $VULNS vulnerabilities"
        echo "VULNERABILITY_COUNT=$VULNS" >> $GITHUB_ENV

    - name: Apply security fixes
      if: env.VULNERABILITY_COUNT != '0'
      run: |
        yarn audit --fix
        yarn install --frozen-lockfile  # Verify installation works

    - name: Run tests after security fixes
      if: env.VULNERABILITY_COUNT != '0'
      run: yarn test

    - name: Create security update PR
      if: env.VULNERABILITY_COUNT != '0'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if ! git diff --quiet package*.json; then
          BRANCH_NAME="security/dependency-fixes-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $BRANCH_NAME
          git add package*.json
          git commit -m "security: fix dependency vulnerabilities

          - Applied yarn audit fix
          - Resolved ${{ env.VULNERABILITY_COUNT }} vulnerabilities
          - All tests passing

          Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

          git push origin $BRANCH_NAME

          gh pr create \
            --title "ðŸ”’ Security: Fix Dependency Vulnerabilities" \
            --body "## Security Dependency Fixes

          This PR addresses security vulnerabilities found in dependencies.

          ### Security Issues Fixed
          - **Vulnerabilities Resolved**: ${{ env.VULNERABILITY_COUNT }}
          - Applied \`yarn audit --fix\` to resolve issues

          ### Verification
          - âœ… Tests are passing
          - âœ… Build is successful
          - âœ… Security vulnerabilities addressed

          ### Priority
          **ðŸš¨ HIGH PRIORITY** - This PR addresses security vulnerabilities and should be reviewed and merged promptly.

          **Auto-generated by GitHub Actions**" \
            --label "security,critical,dependencies" \
            --head $BRANCH_NAME \
            --base main
        fi

  # Major version update notifications
  major-updates-notification:
    runs-on: ubuntu-latest
    needs: check-updates

    steps:
    - name: Download outdated report
      uses: actions/download-artifact@v5
      with:
        name: outdated-report

    - name: Check for major updates
      id: major-updates
      run: |
        if [ -f outdated.json ] && [ -s outdated.json ]; then
          MAJOR_UPDATES=$(cat outdated.json | jq -r 'to_entries[] | select(.value.type == "major") | .key' | tr '\n' ' ')
          if [ -n "$MAJOR_UPDATES" ]; then
            echo "major_updates=$MAJOR_UPDATES" >> $GITHUB_OUTPUT
            echo "has_major=true" >> $GITHUB_OUTPUT
          else
            echo "has_major=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "has_major=false" >> $GITHUB_OUTPUT
        fi

    - name: Create issue for major updates
      if: steps.major-updates.outputs.has_major == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const majorUpdates = '${{ steps.major-updates.outputs.major_updates }}';
          const title = `ðŸ“¦ Major Dependency Updates Available - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## Major Dependency Updates Available

          The following packages have major version updates available that require manual review:

          **Packages with Major Updates**:
          ${majorUpdates.split(' ').filter(pkg => pkg).map(pkg => `- \`${pkg}\``).join('\n')}

          ### Action Required
          Major version updates may contain breaking changes and require manual review:

          1. **Review Changelog**: Check the changelog for each package
          2. **Test Compatibility**: Ensure compatibility with your codebase
          3. **Update Code**: Make necessary code changes if required
          4. **Update Dependencies**: Update packages one by one
          5. **Test Thoroughly**: Run comprehensive tests

          ### Commands to Update
          \`\`\`bash
          # Check specific package details
          yarn info <package-name> versions --json

          # Update specific package
          yarn add <package-name>@latest

          # Run tests after each update
          yarn test
          \`\`\`

          **Labels**: dependencies, major-update, manual-review
          `;

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['dependencies', 'major-update', 'manual-review']
          });

  # Generate dependency report
  generate-report:
    runs-on: ubuntu-latest
    needs: [check-updates, auto-update-safe, security-updates]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Generate dependency tree
      run: |
        yarn install --frozen-lockfile
        yarn list --json > dependency-tree.json

    - name: Create dependency report
      run: |
        echo "# Dependency Report - $(date)" > dependency-report.md
        echo "" >> dependency-report.md

        echo "## Summary" >> dependency-report.md
        TOTAL_DEPS=$(cat package.json | jq '.dependencies | length')
        TOTAL_DEV_DEPS=$(cat package.json | jq '.devDependencies | length')
        echo "- **Production Dependencies**: $TOTAL_DEPS" >> dependency-report.md
        echo "- **Development Dependencies**: $TOTAL_DEV_DEPS" >> dependency-report.md
        echo "" >> dependency-report.md

        echo "## Recent Changes" >> dependency-report.md
        echo "Check the workflow logs for details on any automated updates applied." >> dependency-report.md

    - name: Upload dependency report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-report
        path: |
          dependency-report.md
          dependency-tree.json